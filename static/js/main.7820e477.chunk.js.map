{"version":3,"sources":["components/Header/Header.tsx","components/CustomTableHead/CustomTableHead.tsx","features/MainPage/constants.ts","components/CustomTableBody/CustomTableBody.tsx","features/MainPage/ducks/index.ts","features/MainPage/ducks/selectors.ts","features/MainPage/components/RepoTable/RepoTable.tsx","components/Loader/Loader.tsx","components/SearchInput/SearchInput.tsx","components/FilterSelect/FilterSelect.tsx","features/MainPage/MainPage.tsx","App.tsx","serviceWorker.ts","features/MainPage/ducks/sagas.ts","features/MainPage/MainRepository.ts","store/sagas.ts","store/store.ts","store/reducer.ts","index.tsx","features/MainPage/MainPage.module.css","components/Header/Header.module.css","components/SearchInput/SearchInput.module.css","components/CustomTableBody/CustomTableBody.module.css","components/Loader/Loader.module.css"],"names":["Header","children","AppBar","position","className","styles","appBar","Toolbar","toolbar","Typography","variant","noWrap","CustomTableHead","lables","TableHead","TableRow","map","lable","TableCell","align","key","text","width","headers","CustomTableBody","records","TableBody","tableBody","row","indexRow","item","indexItem","split","href","reposSlice","createSlice","name","initialState","repos","licenses","isLoading","errorMassage","query","page","perPage","reducers","fetchRepos","state","action","payload","fetchReposNotFound","fetchReposSuccses","fetchReposError","fetchLicenses","fetchLicensesSuccses","fetchLicensesError","actions","reducer","getRepos","html_url","license","forks_count","watchers_count","stargazers_count","getLicenses","getLoading","getError","getQueryParams","RepoTable","paginationClassName","rows","dispatch","useDispatch","useSelector","TableContainer","Table","size","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","value","Loader","loading","SearchInput","handleSearch","lableWidth","buttonText","React","setText","cn","form","FormControl","fullWidth","InputLabel","htmlFor","OutlinedInput","id","startAdornment","InputAdornment","labelWidth","onChange","Button","type","submit","onClick","handleSubmit","FilterSelect","handleSelect","items","selected","Select","labelId","e","style","MenuItem","MainPage","error","useEffect","length","filter","search","table","theme","createMuiTheme","locales","App","Boolean","window","location","hostname","match","actionWatcher","MainRepo","params","a","axios","get","q","then","response","catch","console","data","encodeURI","sort","order","per_page","call","put","takeLatest","rootSaga","sagas","all","saga","spawn","sagaMiddleware","createSagaMiddleware","store","configureStore","combineReducers","middleware","getDefaultMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"kMAoBeA,EAb8B,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,SAC3C,OACA,gBAACC,EAAA,EAAD,CAAQC,SAAS,WAAWC,UAAWC,IAAOC,QAC1C,gBAACC,EAAA,EAAD,CAASH,UAAaC,IAAOG,SACzB,gBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,GAC1BV,M,uECaFW,EAfmC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,OAChD,OACI,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGF,EAAOG,KAAI,SAACC,GAAD,OACZ,kBAACC,EAAA,EAAD,CAAWC,MAAM,SAAUC,IAAKH,EAAMI,KAAMC,MAAOL,EAAMK,MAAML,EAAMK,MAAM,IACtEL,EAAMI,YChBVE,EAAQ,CACjB,CAACF,KAAM,mDAAYC,MAAO,KAC1B,CAACD,KAAM,MAAMC,MAAO,KACpB,CAACD,KAAM,mDAAYC,MAAO,KAC1B,CAACD,KAAM,uEAAgBC,MAAO,KAC9B,CAACD,KAAM,2CAAkBC,MAAO,KAChC,CAACD,KAAM,iEAAeC,MAAO,M,0BCkBlBE,EAhBmC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,QAChD,OACI,kBAACC,EAAA,EAAD,CAAWtB,UAAWC,IAAOsB,WACzBF,EAAQT,KAAI,SAACY,EAAKC,GAAN,OACZ,kBAACd,EAAA,EAAD,CAAUK,IAAG,mBAAcS,IACvBD,EAAIZ,KAAI,SAACc,EAAMC,GAAP,OACT,kBAACb,EAAA,EAAD,CAAWC,MAAM,OAAOC,IAAG,oBAAeW,IACrB,kBAATD,GAA0C,UAArBA,EAAKE,MAAM,KAAK,GAAe,uBAAGC,KAAMH,GAAOA,GAAWA,Y,gBC0B7FI,EAAaC,YAAY,CAClCC,KAAM,OACNC,aAZ2B,CAC3BC,MAAO,GACPC,SAAU,GACVC,WAAW,EACXC,aAAc,KACdC,MAAM,CACFC,KAAM,EACNC,QAAS,KAMbC,SAAS,CACLC,WAAY,SAACC,EAA0BC,GACnCD,EAAMP,WAAY,EAClBO,EAAMN,aAAe,KACrBM,EAAMT,MAAQ,GACdS,EAAML,MAAQM,EAAOC,SAEzBC,mBAAmB,SAACH,EAA0BC,GAC1CD,EAAMN,aAAeO,EAAOC,QAC5BF,EAAMP,WAAY,GAEtBW,kBAAmB,SAACJ,EAA0BC,GAC1CD,EAAMT,MAAQU,EAAOC,QACrBF,EAAMP,WAAY,GAEtBY,gBAAiB,SAACL,GACdA,EAAMP,WAAY,GAEtBa,cAAe,SAACN,GACZA,EAAMP,WAAY,GAEtBc,qBAAsB,SAACP,EAA0BC,GAC7CD,EAAMR,SAAWS,EAAOC,QACxBF,EAAMP,WAAY,GAEtBe,mBAAoB,SAACR,GACjBA,EAAMP,WAAY,MAKfgB,EAAqBtB,EAArBsB,QAEAC,EAFqBvB,EAAZuB,QCxEXC,EAAW,SAACX,GAAD,OAAkDA,EAAMT,MAAMA,MAAMtB,KAAI,SAAAc,GAAI,YAAE,CAACA,EAAKM,KAAMN,EAAK6B,SAAjB,UAA2B7B,EAAK8B,eAAhC,aAA2B,EAAcxB,KAAMN,EAAK+B,YAAa/B,EAAKgC,eAAgBhC,EAAKiC,sBACpLC,EAAc,SAACjB,GAAD,OAAqCA,EAAMT,MAAMC,UAC/D0B,EAAa,SAAClB,GAAD,OAA6BA,EAAMT,MAAME,WACtD0B,EAAW,SAACnB,GAAD,OAAkCA,EAAMT,MAAMG,cACzD0B,EAAiB,SAACpB,GAAD,OAAiCA,EAAMT,MAAMI,OC2C5D0B,EAlC6B,SAAC,GAA4D,IAA3DhE,EAA0D,EAA1DA,UAAUiE,EAAgD,EAAhDA,oBAAoBC,EAA4B,EAA5BA,KAClEC,EAAqBC,cACrB9B,EAAQ+B,YAAYN,GAS1B,OACI,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,KAAM,SACNxE,UAAWA,GAEX,kBAAC,EAAD,CAAiBS,OAAQU,IACzB,kBAAC,EAAD,CAAiBE,QAAS6C,KAE9B,kBAACO,EAAA,EAAD,CACQC,mBAAoB,CAAC,GAAI,GAAI,GAAI,IACjCC,UAAU,MACVC,OAAQ,EACRC,YAAavC,EAAME,QACnBD,KAAMD,EAAMC,KAAK,EACjBuC,aAtBS,SAAEC,EAA8DC,GACrFb,EAASf,EAAQV,WAAW,CAACc,QAASlB,EAAMkB,QAASvC,KAAMqB,EAAMrB,KAAMsB,KAAKyC,EAAQ,EAAGxC,QAAQF,EAAME,YAsBzFyC,oBAnBgB,SAAEF,GAC9BZ,EAASf,EAAQV,WAAW,CAACc,QAASlB,EAAMkB,QAASvC,KAAMqB,EAAMrB,KAAMsB,KAAK,EAAGC,QAAQ0C,SAASH,EAAMI,OAAOC,MAAO,QAmBxGpF,UAAWiE,M,iBC1BhBoB,EAfS,WACpB,OACI,yBAAKrF,UAAWC,IAAOqF,SACnB,8BAEA,8BAEA,8BAEA,gC,6EC+BGC,EA9BiC,SAAC,GAAsF,IAArFC,EAAoF,EAApFA,aAAc3E,EAAsE,EAAtEA,MAAsE,IAA/D4E,kBAA+D,MAAlD,GAAkD,EAA9CC,EAA8C,EAA9CA,WAAY1F,EAAkC,EAAlCA,UAAkC,EAC1G2F,WAAe,IAD2F,mBAC3H1E,EAD2H,KACrH2E,EADqH,KAWlI,OACI,uBAAK5F,UAAW6F,YAAG5F,IAAO6F,KAAM9F,IAChC,gBAAC+F,EAAA,EAAD,CAAaC,WAAS,EAAC1F,QAAQ,WAAWkE,KAAK,SAC9C3D,GAAS,gBAACoF,EAAA,EAAD,CAAYC,QAAQ,QAAQrF,GACtC,gBAACsF,EAAA,EAAD,CACIC,GAAG,OACHC,eAAgB,gBAACC,EAAA,EAAD,CAAgBvG,SAAS,UACzCwG,WAAYd,EACZL,MAASnE,EACTuF,SAjBa,SAACzB,GAClBa,EAAQb,EAAMI,OAAOC,WAmBrB,gBAACqB,EAAA,EAAD,CAAQnG,QAAQ,YAAYoG,KAAK,SAAS1G,UAAWC,IAAO0G,OAAQC,QAhBnD,SAAC3F,GAClB,OAAO,WAAKuE,EAAavE,IAeoD4F,CAAa5F,IACrFyE,K,kBCIEoB,EA5BmC,SAAC,GAA+D,IAA9DC,EAA6D,EAA7DA,aAAclG,EAA+C,EAA/CA,MAAOmG,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,SAM5E,OACI,2BACI,gBAAChB,EAAA,EAAD,CAAYG,GAAG,SAASvF,GACxB,gBAACqG,EAAA,EAAD,CACAC,QAAQ,QACRf,GAAG,qBACHhB,MAAO6B,EACPT,SAXa,SAACY,GAClBL,EAAaK,EAAEjC,OAAOC,QAWlBiC,MAAQ,CAACnG,MAAO,SAEZ,gBAACoG,EAAA,EAAD,CAAUlC,MAAO,GACb,mCAEH4B,EAAMpG,KAAI,SAAAc,GAAI,OACf,gBAAC4F,EAAA,EAAD,CAAUtG,IAAG,UAAKH,EAAL,mBAAqBa,EAAKV,KAAOoE,MAAO1D,EAAKV,KAAMU,EAAKM,YC+BtEuF,GAlDY,WACzB,IAAMpD,EAAqBC,cAErBlC,EAAQmC,YAAYf,GACpBnB,EAAWkC,YAAYT,GACvB0B,EAAUjB,YAAYR,GACtB2D,EAAQnD,YAAYP,GACpBxB,EAAQ+B,YAAYN,GAE1B0D,qBAAU,WACHvF,EAAMwF,QACTvD,EAASf,EAAQV,WAAW,CAACH,KAAK,EAAGC,QAAQ,MAE1CL,EAASuF,QACZvD,EAASf,EAAQH,mBAElB,CAACkB,IAUJ,OAAQ,oCACJ,kBAAC,EAAD,oGACA,yBAAKnE,UAAWC,IAAO0H,QACrB,kBAAC,EAAD,CACEnC,aAZa,SAACvE,GACpBkD,EAASf,EAAQV,WAAW,CAACc,QAASlB,EAAMkB,QAASvC,KAAMA,EAAMsB,KAAK,EAAGC,QAAQ,OAY3E3B,MAAO,6EACP4E,WAAY,IACZC,WAAY,iCACZ1F,UAAWC,IAAO2H,SAEpB,kBAAC,EAAD,CACEb,aAfa,SAAC3B,GACpBjB,EAASf,EAAQV,WAAW,CAACc,QAAS4B,EAAOnE,KAAMqB,EAAMrB,KAAMsB,KAAK,EAAGC,QAAQ,OAezE3B,MAAQ,qGACRmG,MAAS7E,EACT8E,SAAY3E,EAAMkB,WAGpB8B,GAAW,kBAAC,EAAD,OACXA,KAAapD,EAAMwF,QAAU,kBAAC,EAAD,CAAW1H,UAAWC,IAAO4H,MAAO5D,oBAAqBhE,IAAO4H,MAAO3D,KAAMhC,IAC1GsF,GAAQ,kBAACnH,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAWC,IAAOuH,OAASA,EAApD,O,4BCtDVM,GAAQC,aACZC,SAWaC,OARf,WACE,OACE,kBAAC,KAAD,CAAkBH,MAAOA,IACzB,kBAAC,GAAD,QCAgBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sGCDW5F,I,aA0BAO,I,aAUQsF,IAhDnBC,GAAW,I,uCCANlF,S,yCAAW,WAAOmF,GAAP,kBAAAC,EAAA,sEACQC,KAAMC,IAAN,uDAAgFH,EAAOI,GAAK,CAACJ,OAAQA,EAAOA,SAASK,MAAM,SAACC,GAClJ,OAAOA,KAERC,OAAM,SAAUxB,GACbyB,QAAQzB,MAAMA,MALF,uBACR0B,EADQ,EACRA,KADQ,kBAOTA,GAPS,2C,2DASXtF,Y,wBAAc,+BAAA8E,EAAA,sEACKC,KAAMC,IAA0B,mCAAmCE,MAAM,SAACC,GAChG,OAAOA,KAERC,OAAM,SAAUxB,GACbyB,QAAQzB,MAAMA,MALC,uBACX0B,EADW,EACXA,KADW,kBAOZA,GAPY,4CDGlB,SAAUxG,GAAWE,GAArB,4EAc+B,OAd/B,SAEGiG,EAAWM,UAAU,GAAD,OAAIvG,EAAOC,QAAQ5B,KAAK2B,EAAOC,QAAQ5B,KAAK,IAAI,IAAhD,OAAqD2B,EAAOC,QAAQW,QAAQ,WAAWZ,EAAOC,QAAQW,QAAQ,IAAI,GAAlH,gBAEpBiF,EAAsB,CAC1BI,EAAGA,EACHJ,OAAO,CACLW,KAAM,QACNC,MAAO,OACP9G,KAAMK,EAAOC,QAAQN,KACrB+G,SAAU1G,EAAOC,QAAQL,UAV1B,SAcqC+G,aAAKf,GAASlF,SAAUmF,GAd7D,YAcGS,EAdH,QAgBMlC,MAAMU,OAhBZ,iBAiBD,OAjBC,SAiBK8B,aAAIpG,EAAQL,kBAAyCmG,EAAMlC,QAjBhE,+BAmBD,OAnBC,UAmBKwC,aAAIpG,EAAQN,mBAAmB,cAnBpC,gCAsBH,OAtBG,oCAsBG0G,aAAIpG,EAAQJ,mBAtBf,uDA0BA,SAAUC,KAAV,wEAE0B,OAF1B,kBAEgCsG,aAAKf,GAAS5E,aAF9C,OAIH,OAFMsF,EAFH,gBAIGM,aAAIpG,EAAQF,qBAAqBgG,IAJpC,8BAMH,OANG,mCAMGM,aAAIpG,EAAQD,sBANf,sDAUQ,SAAUoF,KAAV,kEACb,OADa,SACPkB,aAAWrG,EAAQV,WAAYA,IADxB,OAEb,OAFa,SAEP+G,aAAWrG,EAAQH,cAAeA,IAF3B,wC,iBE9CUyG,IAHnBC,GAAS,CACbzH,IAEa,SAAUwH,KAAV,kEACX,OADW,SACLE,aAAID,GAAM/I,KAAI,SAAAiJ,GAAI,OAAIC,aAAMD,OADvB,wC,aCFTE,GAAiBC,eACjBC,GAAQC,YAAe,CAAC7G,QCG5B8G,aAA0B,CACxBjI,UDJkDkI,WAAW,GAAD,oBAAMC,eAAN,CAA6BN,OAC7FA,GAAeO,IAAIX,IACJM,UEDfM,IAASC,OACL,kBAAC,IAAD,CAAUP,MAAQA,IAAQ,kBAAC,GAAD,OAC5BQ,SAASC,eAAe,SNkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAxB,GACLyB,QAAQzB,MAAMA,EAAMwD,a,mBOhJ5BC,EAAOC,QAAU,CAAC,OAAS,yBAAyB,OAAS,yBAAyB,MAAQ,wBAAwB,MAAQ,0B,mBCA9HD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,0B,mBCA5DD,EAAOC,QAAU,CAAC,OAAS,4BAA4B,KAAO,4B,mBCA9DD,EAAOC,QAAU,CAAC,UAAY,qC,mBCA9BD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,WAAW,2B","file":"static/js/main.7820e477.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport styles from './Header.module.css'\r\n\r\n\r\nconst Header: React.FC<{children?:string}> = ({children}): React.ReactElement =>{\r\n    return (\r\n    <AppBar position=\"relative\" className={styles.appBar}>\r\n        <Toolbar className = {styles.toolbar}>\r\n            <Typography variant=\"h6\" noWrap >\r\n                {children}\r\n            </Typography>\r\n        </Toolbar>\r\n    </AppBar>\r\n    );\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport { TableHead, TableRow, TableCell } from '@material-ui/core'\r\n\r\nexport type TableHeadProps = {\r\n    lables: Array<{\r\n        text:string,\r\n        width?: number,\r\n    }>\r\n}\r\n\r\nconst CustomTableHead: React.FC<TableHeadProps> = ({lables}):React.ReactElement => {\r\n    return(\r\n        <TableHead>\r\n          <TableRow>\r\n            {lables.map((lable)=>(\r\n            <TableCell align='center'  key={lable.text} width={lable.width?lable.width:60}>\r\n                {lable.text}\r\n            </TableCell>\r\n            )\r\n            )}\r\n          </TableRow>\r\n        </TableHead>\r\n    )\r\n}\r\n\r\nexport default CustomTableHead","export const headers=[\r\n    {text: 'Название', width: 200},\r\n    {text: 'URL',width: 500},\r\n    {text: 'Лицензия', width: 200},\r\n    {text: 'Кол-во форков',width: 200},\r\n    {text: 'Кол-во watchers',width: 200},\r\n    {text: 'Кол-во звезд',width: 200},\r\n]\r\nexport const organizationHeaders = [\r\n    {text: 'Существующие организации', width: 200},\r\n]","import React from 'react'\r\nimport {TableRow, TableCell, TableBody } from '@material-ui/core'\r\nimport styles from './CustomTableBody.module.css'\r\n\r\nexport type TableBodyProps= {\r\n    records: Array<Array<string|number>>\r\n}\r\n\r\nconst CustomTableBody: React.FC<TableBodyProps> = ({records}):React.ReactElement => {\r\n    return(\r\n        <TableBody className={styles.tableBody}>\r\n          { records.map((row, indexRow) => (\r\n            <TableRow key={`rowindex_${indexRow}`}>\r\n               {row.map((item, indexItem)=>(\r\n               <TableCell align='left' key={`cellIndex_${indexItem}`}>\r\n                   {typeof item === 'string' && item.split(':')[0]==='https' ? <a href={item}>{item}</a>: item}\r\n               </TableCell>\r\n               ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n    )\r\n}\r\n\r\nexport default CustomTableBody","import { createSlice, PayloadAction, Draft } from '@reduxjs/toolkit'\r\n\r\nexport type queryParams = {\r\n    text?: string,\r\n    license?: string,\r\n    page: number,\r\n    perPage: number,\r\n}\r\n\r\nexport type Repo = {\r\n    name: string,\r\n    html_url: string,\r\n    license: {name: string}\r\n    forks_count: number,\r\n    watchers_count: number,\r\n    stargazers_count: number,\r\n}\r\n\r\nexport type License = {\r\n    key: string,\r\n    name: string,\r\n}\r\n\r\nexport type ReposState ={\r\n    repos: Array<Repo>,\r\n    licenses: Array<License>\r\n    isLoading: boolean,\r\n    errorMassage: string|null,\r\n    query: queryParams,\r\n}\r\n\r\nconst initialState:ReposState ={\r\n    repos: [],\r\n    licenses: [],\r\n    isLoading: false,\r\n    errorMassage: null,\r\n    query:{\r\n        page: 0,\r\n        perPage: 10,\r\n    }\r\n}\r\nexport const reposSlice = createSlice({\r\n    name: 'repo',\r\n    initialState,\r\n    reducers:{\r\n        fetchRepos: (state: Draft<ReposState>, action:PayloadAction<queryParams>): void =>{\r\n            state.isLoading = true\r\n            state.errorMassage = null\r\n            state.repos = []\r\n            state.query = action.payload\r\n        },\r\n        fetchReposNotFound:(state: Draft<ReposState>, action:PayloadAction<string>):void =>{\r\n            state.errorMassage = action.payload\r\n            state.isLoading = false\r\n        },\r\n        fetchReposSuccses: (state: Draft<ReposState>, action:PayloadAction<Array<Repo>>): void =>{\r\n            state.repos = action.payload\r\n            state.isLoading = false\r\n        },\r\n        fetchReposError: (state: Draft<ReposState>): void =>{\r\n            state.isLoading = false\r\n        },\r\n        fetchLicenses: (state: Draft<ReposState>): void =>{\r\n            state.isLoading = true\r\n        },\r\n        fetchLicensesSuccses: (state: Draft<ReposState>, action:PayloadAction<Array<License>>): void =>{\r\n            state.licenses = action.payload\r\n            state.isLoading = false\r\n        },\r\n        fetchLicensesError: (state: Draft<ReposState>): void =>{\r\n            state.isLoading = false\r\n        },\r\n    }\r\n})\r\n\r\nexport const { actions, reducer } = reposSlice\r\n\r\nexport default reducer","import { queryParams, License } from './index';\r\nimport { AppState } from '../../../store/reducer'\r\n\r\nexport const getRepos = (state: AppState): Array<Array<string|number>> => state.repos.repos.map(item=>[item.name, item.html_url, item.license?.name, item.forks_count, item.watchers_count, item.stargazers_count])\r\nexport const getLicenses = (state: AppState): Array<License> => state.repos.licenses\r\nexport const getLoading = (state: AppState): Boolean=> state.repos.isLoading\r\nexport const getError = (state: AppState): string|null => state.repos.errorMassage\r\nexport const getQueryParams = (state: AppState): queryParams =>state.repos.query","import React from 'react'\r\nimport { TableContainer, Table, TablePagination } from '@material-ui/core';\r\nimport CustomTableHead from '../../../../components/CustomTableHead';\r\nimport {headers} from '../../constants'\r\nimport CustomTableBody from '../../../../components/CustomTableBody';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {Dispatch} from 'redux'\r\nimport {actions} from '../../ducks'\r\nimport { getQueryParams } from '../../ducks/selectors';\r\n\r\nexport type RepoTableProps={\r\n    rows: Array<Array<string|number>>\r\n    className?: string,\r\n    paginationClassName?: string,\r\n}\r\n\r\nconst RepoTable: React.FC<RepoTableProps> = ({className,paginationClassName,rows}):React.ReactElement =>{\r\n    const dispatch: Dispatch = useDispatch()\r\n    const query = useSelector(getQueryParams)\r\n\r\n    const handleChangePage = ( event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null,newPage:number) => {\r\n        dispatch(actions.fetchRepos({license: query.license, text: query.text, page:newPage+1, perPage:query.perPage}))\r\n      };\r\n    \r\n    const handleChangeRowsPerPage = ( event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        dispatch(actions.fetchRepos({license: query.license, text: query.text, page:1, perPage:parseInt(event.target.value, 10)}))\r\n      };\r\n    return(\r\n        <TableContainer >\r\n            <Table\r\n                size={'medium'}\r\n                className={className}\r\n            >\r\n                <CustomTableHead lables={headers} />\r\n                <CustomTableBody records={rows}/>\r\n            </Table>\r\n            <TablePagination\r\n                    rowsPerPageOptions={[10, 15, 25, 50]}\r\n                    component=\"div\" \r\n                    count={-1}\r\n                    rowsPerPage={query.perPage}\r\n                    page={query.page-1}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    className={paginationClassName}\r\n                />\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default RepoTable;","import React from 'react'\r\nimport styles from './Loader.module.css'\r\n\r\nconst Loader: React.FC =():React.ReactElement => {\r\n    return (\r\n        <div className={styles.loading}>\r\n            <div>\r\n            </div>\r\n            <div>\r\n            </div>\r\n            <div>\r\n            </div>\r\n            <div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","import * as React from 'react'\r\nimport styles from './SearchInput.module.css'\r\nimport cn from 'clsx'\r\nimport { FormControl, OutlinedInput, InputAdornment, InputLabel, Button } from '@material-ui/core'\r\n\r\nexport type SearchInputProps = {\r\n    handleSearch(text:string): void,\r\n    lable?: string\r\n    lableWidth?: number\r\n    buttonText: string\r\n    className?:string\r\n}\r\n\r\nconst SearchInput: React.FC<SearchInputProps> = ({handleSearch, lable, lableWidth = 60, buttonText, className}): React.ReactElement =>{\r\n    const [text, setText] = React.useState('');\r\n    \r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setText(event.target.value as string);\r\n    }\r\n\r\n    const handleSubmit = (text: string) =>{\r\n        return ()=>{handleSearch(text)}\r\n    }\r\n\r\n    return(\r\n        <div className={cn(styles.form, className)}>\r\n        <FormControl fullWidth variant=\"outlined\" size='small'>\r\n        {lable && <InputLabel htmlFor=\"text\">{lable}</InputLabel>}\r\n        <OutlinedInput\r\n            id=\"text\"\r\n            startAdornment={<InputAdornment position=\"start\"></InputAdornment>}\r\n            labelWidth={lableWidth}\r\n            value = {text}\r\n            onChange = {handleChange}\r\n        />\r\n        </FormControl>\r\n        <Button variant=\"contained\" type='submit' className={styles.submit} onClick={handleSubmit(text)}>\r\n            {buttonText}\r\n        </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchInput","import * as React from 'react'\r\nimport { MenuItem, Select, InputLabel } from '@material-ui/core'\r\n\r\nexport type FilterSelectProps ={\r\n    handleSelect(value:string|number): void,\r\n    lable: string,\r\n    selected?: string|number,\r\n    items: Array<{\r\n        name: string,\r\n        key: string|number\r\n    }>\r\n}\r\n\r\nconst FilterSelect: React.FC<FilterSelectProps> = ({handleSelect, lable, items, selected}): React.ReactElement =>{\r\n\r\n    const handleChange = (e:React.ChangeEvent<{ value: unknown }>)=>{\r\n        handleSelect(e.target.value as string|number)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <InputLabel id=\"label\">{lable}</InputLabel>\r\n            <Select\r\n            labelId=\"label\"\r\n            id=\"demo-simple-select\"\r\n            value={selected}\r\n            onChange={handleChange}\r\n            style ={{width: '100%'}}\r\n            >\r\n                <MenuItem value={0}>\r\n                    <em>None</em>\r\n                </MenuItem>\r\n                {items.map(item =>\r\n                <MenuItem key={`${lable}_filter_${item.key}`} value={item.key}>{item.name}</MenuItem>\r\n                )}\r\n\r\n            </Select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FilterSelect","import React, { useEffect } from 'react';\r\nimport {Dispatch} from 'redux'\r\nimport Header from '../../components/Header';\r\nimport styles from './MainPage.module.css';\r\nimport RepoTable from './components/RepoTable';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {getRepos, getLoading, getError, getLicenses, getQueryParams} from './ducks/selectors'\r\nimport {actions} from './ducks'\r\nimport Loader from '../../components/Loader';\r\nimport { Typography } from '@material-ui/core';\r\nimport SearchInput from '../../components/SearchInput';\r\nimport FilterSelect from '../../components/FilterSelect';\r\n\r\n\r\nconst MainPage: React.FC = (): React.ReactElement =>{\r\n  const dispatch: Dispatch = useDispatch()\r\n\r\n  const repos = useSelector(getRepos)\r\n  const licenses = useSelector(getLicenses)\r\n  const loading = useSelector(getLoading)\r\n  const error = useSelector(getError)\r\n  const query = useSelector(getQueryParams)\r\n\r\n  useEffect(() => {\r\n    if (!repos.length){\r\n      dispatch(actions.fetchRepos({page:1, perPage:10}))\r\n    }\r\n    if (!licenses.length){\r\n      dispatch(actions.fetchLicenses())\r\n    }\r\n  }, [dispatch])\r\n\r\n  const handleSearch = (text:string)=>{\r\n    dispatch(actions.fetchRepos({license: query.license, text: text, page:1, perPage:10}))\r\n  }\r\n  \r\n  const handleSelect = (value: string) =>{\r\n    dispatch(actions.fetchRepos({license: value, text: query.text, page:1, perPage:10}))\r\n  }\r\n\r\n  return (<>\r\n      <Header >Добро пожаловать</Header>\r\n      <div className={styles.filter}>\r\n        <SearchInput \r\n          handleSearch={handleSearch} \r\n          lable={'Поиск по слову'}\r\n          lableWidth={145} \r\n          buttonText={'Поиск'} \r\n          className={styles.search}  \r\n        />\r\n        <FilterSelect\r\n          handleSelect = {handleSelect}\r\n          lable = 'Фильтр по лицензии'\r\n          items = {licenses}\r\n          selected = {query.license}\r\n        />\r\n      </div>\r\n      { loading && <Loader/>}\r\n      {!loading && !!repos.length && <RepoTable className={styles.table} paginationClassName={styles.table} rows={repos}/>}\r\n      { error&& <Typography variant='h5' className={styles.error} >{error} </Typography>}\r\n      </>\r\n  );\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\r\nimport MainPage from './features/MainPage';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\r\nimport * as locales from '@material-ui/core/locale';\r\n\r\nconst theme = createMuiTheme(\r\n  locales['ruRU']\r\n);\r\n\r\nfunction App() {\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n    <MainPage/>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Repo, License } from './index';\r\nimport { call, put, takeLatest } from 'redux-saga/effects'\r\nimport { actions } from '../ducks'\r\nimport MainRepository from '../MainRepository';\r\n\r\nconst MainRepo = new MainRepository()\r\n\r\nexport type queryParams = {\r\n  q: string,\r\n  params:{\r\n    sort: string,\r\n    order: string,\r\n    page: number,\r\n    per_page: number,\r\n  }\r\n} \r\n\r\nexport function* fetchRepos(action: ReturnType<typeof actions.fetchRepos>) {\r\n  try {\r\n    const q:string = encodeURI(`${action.payload.text?action.payload.text+'+':''}${action.payload.license?'license:'+action.payload.license+'+':''}language:js`)\r\n\r\n    const params: queryParams = {\r\n      q: q,\r\n      params:{\r\n        sort: 'stars',\r\n        order: 'desc',\r\n        page: action.payload.page,\r\n        per_page: action.payload.perPage\r\n      }\r\n    }\r\n\r\n    const data:{items: Array<Repo>} = yield call(MainRepo.getRepos, params)\r\n\r\n    if (data.items.length) {\r\n      yield put(actions.fetchReposSuccses((<{items: Array<Repo>}>data).items))\r\n    } else {\r\n      yield put(actions.fetchReposNotFound('Not Found'))\r\n    }\r\n  } catch (e) {\r\n    yield put(actions.fetchReposError())\r\n  }\r\n}\r\n\r\nexport function* fetchLicenses(){\r\n  try{\r\n    const data: Array<License> = yield call(MainRepo.getLicenses)\r\n\r\n    yield put(actions.fetchLicensesSuccses(data))\r\n  } catch(e){\r\n    yield put(actions.fetchLicensesError())\r\n  }\r\n}\r\n\r\nexport default function* actionWatcher() {\r\n  yield takeLatest(actions.fetchRepos, fetchRepos)\r\n  yield takeLatest(actions.fetchLicenses, fetchLicenses)\r\n}","import { queryParams } from './ducks/sagas';\r\nimport { Repo, License } from '../MainPage/ducks';\r\nimport axios from 'axios'\r\n\r\nexport default class MainRepository {\r\n    public getRepos = async (params: queryParams): Promise<{items: Array<Repo>}> => {\r\n      const { data }  = await axios.get<{items: Array<Repo>}>(`https://api.github.com/search/repositories?q=${params.q}`, {params: params.params}).then( (response : any)=> {\r\n        return response;\r\n      })\r\n      .catch(function (error) {\r\n          console.error(error)\r\n      })\r\n      return data\r\n    }\r\n    public getLicenses = async ():Promise<Array<License>> =>{\r\n      const { data }  = await axios.get<{items: Array<Repo>}>('https://api.github.com/licenses').then( (response : any)=> {\r\n        return response;\r\n      })\r\n      .catch(function (error) {\r\n          console.error(error)\r\n      })\r\n      return data\r\n    }\r\n}","import repos from '../features/MainPage/ducks/sagas'\r\nimport { all,spawn } from 'redux-saga/effects'\r\n\r\n\r\nconst sagas =  [\r\n  repos\r\n]\r\nexport default function* rootSaga() {\r\n    yield all(sagas.map(saga => spawn(saga)))\r\n  }","import rootReducer from './reducer';\r\nimport sagas from './sagas'\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = configureStore({reducer: rootReducer(), middleware: [...getDefaultMiddleware(),sagaMiddleware]});\r\nsagaMiddleware.run(sagas)\r\nexport default store;   ","import { CombinedState, combineReducers, Reducer } from '@reduxjs/toolkit'\r\n\r\nimport repos, { ReposState } from '../features/MainPage/ducks'\r\n\r\nexport type AppState = {\r\n    repos: ReposState\r\n}\r\n\r\nexport default (): Reducer<CombinedState<AppState>> =>\r\n  combineReducers<AppState>({\r\n    repos\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/store';\r\nReactDOM.render(\r\n    <Provider store ={store} ><App /></Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"MainPage_filter__r9lnf\",\"search\":\"MainPage_search__3MVj_\",\"table\":\"MainPage_table__s3Vv6\",\"error\":\"MainPage_error__1leJD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appBar\":\"Header_appBar__y0V4B\",\"toolbar\":\"Header_toolbar__Q738T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"submit\":\"SearchInput_submit__uSf-x\",\"form\":\"SearchInput_form__MOqUB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableBody\":\"CustomTableBody_tableBody__2lqiM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loader_loading__2sabT\",\"lds-ring\":\"Loader_lds-ring__vRqjU\"};"],"sourceRoot":""}